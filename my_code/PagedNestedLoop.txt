
static TupleTableSlot* ExecPagedNestLoop(PlanState *pstate)
{
	NestLoopState *node = castNode(NestLoopState, pstate);
	NestLoop   *nl;
	PlanState  *innerPlan;
	PlanState  *outerPlan;
	TupleTableSlot *outerTupleSlot;
	TupleTableSlot *innerTupleSlot;
	ExprState  *joinqual;
	ExprState  *otherqual;
	ExprContext *econtext;
	ListCell   *lc;

	CHECK_FOR_INTERRUPTS();

	/*
	 * get information from the node
	 */
	ENL1_printf("getting info from node");

	nl = (NestLoop *) node->js.ps.plan;
	joinqual = node->js.joinqual;
	otherqual = node->js.ps.qual;
	outerPlan = outerPlanState(node);
	innerPlan = innerPlanState(node);
	econtext = node->js.ps.ps_ExprContext;

	/*
	 * Reset per-tuple memory context to free any expression evaluation
	 * storage allocated in the previous tuple cycle.
	 */
	ResetExprContext(econtext);

	/*
	 * Ok, everything is setup for the join so now loop until we return a
	 * qualifying join tuple.
	 */
	ENL1_printf("entering main loop");

	for (;;)
	{
		node->forLoopCounter++;
		if (node->needOuterPage) {
			if (node->outerPage != NULL){
				pfree(node->outerPage);
			}

			node->outerPage = InitRelationPage();
			LoadNextPage(outerPlan, node->outerPage);
			node->outerTupleCounter += node->outerPage->tupleCount;
			node->needOuterPage = false;
			node->outerPageCounter++;
			continue;
		}
		if (node->needInnerPage) {
			if (node->innerPage != NULL){
				pfree(node->innerPage);
			}
			node->innerPage = InitRelationPage();
			LoadNextPage(innerPlan, node->innerPage);
			node->innerTupleCounter += node->innerPage->tupleCount;
			node->needInnerPage = false;
			node->innerPageCounter++;
			node->innerPageCounterTotal++;
		} 

		if (node->innerPage->index < PAGE_SIZE && node->outerPage->index < PAGE_SIZE) {
			outerTupleSlot = node->outerPage->tuples[node->outerPage->index];
			innerTupleSlot = node->innerPage->tuples[node->innerPage->index];
		} else if (node->innerPage->index == PAGE_SIZE) {
			if (node->outerPage->index < PAGE_SIZE - 1){
				node->outerPage->index++;
				node->innerPage->index = 0;
			} else { // outer page reached its end
				node->needInnerPage = true;
				node->outerPage->index = 0;
				// return NULL;
			}
			continue;
		} else {
			elog(ERROR, "shouldn't endup here");
		}
		
		if (TupIsNull(innerTupleSlot))
		{
			/*
			 * fetch the values of any outer Vars that must be passed to the
			 * inner scan, and store them in the appropriate PARAM_EXEC slots.
			 */
			foreach(lc, nl->nestParams)
			{
				NestLoopParam *nlp = (NestLoopParam *) lfirst(lc);
				int			paramno = nlp->paramno;
				ParamExecData *prm;

				prm = &(econtext->ecxt_param_exec_vals[paramno]);
				/* Param value should be an OUTER_VAR var */
				Assert(IsA(nlp->paramval, Var));
				Assert(nlp->paramval->varno == OUTER_VAR);
				Assert(nlp->paramval->varattno > 0);
				prm->value = slot_getattr(outerTupleSlot,
										  nlp->paramval->varattno,
										  &(prm->isnull));
				/* Flag parameter value as changed */
				innerPlan->chgParam = bms_add_member(innerPlan->chgParam,
													 paramno);
			}

			/*
			 * now rescan the inner plan
			 */
			ENL1_printf("rescanning inner plan");
			ExecReScan(innerPlan);
			node->innerTupleCounter = 0;
			node->needInnerPage = true;
			node->needOuterPage = true;
			continue;
		}
		if (TupIsNull(outerTupleSlot)){
			elog(INFO, " current outer is null");
			elog(INFO, "inner tups: %d outer tups: %d", 
					node->innerTupleCounter, node->outerTupleCounter);
			elog(INFO, "join done!");
			return NULL;
		}
		econtext->ecxt_outertuple = outerTupleSlot;
		econtext->ecxt_innertuple = innerTupleSlot;
		node->innerPage->index++;

		/*
		 * at this point we have a new pair of inner and outer tuples so we
		 * test the inner and outer tuples to see if they satisfy the node's
		 * qualification.
		 *
		 * Only the joinquals determine MatchedOuter status, but all quals
		 * must pass to actually return the tuple.
		 */
		ENL1_printf("testing qualification");

		if (ExecQual(joinqual, econtext))
		{

			if (otherqual == NULL || ExecQual(otherqual, econtext))
			{
				/*
				 * qualification was satisfied so we project and return the
				 * slot containing the result tuple using ExecProject().
				 */
				ENL1_printf("qualification succeeded, projecting tuple");
				return ExecProject(node->js.ps.ps_ProjInfo);
			}
			else
				InstrCountFiltered2(node, 1);
		}
		else
			InstrCountFiltered1(node, 1);

		/*
		 * Tuple fails qual, so free per-tuple memory and try again.
		 */
		ResetExprContext(econtext);

		ENL1_printf("qualification failed, looping");
	}
}
